{"version":3,"file":"yii.activeForm.js","mappings":"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","sources":["webpack://kanban/../vendor/yiisoft/yii2/assets/yii.activeForm.js"],"sourcesContent":["/**\n * Yii form widget.\n *\n * This is the JavaScript widget used by the yii\\widgets\\ActiveForm widget.\n *\n * @link https://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license https://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n(function ($) {\n\n    $.fn.yiiActiveForm = function (method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else {\n            if (typeof method === 'object' || !method) {\n                return methods.init.apply(this, arguments);\n            } else {\n                $.error('Method ' + method + ' does not exist on jQuery.yiiActiveForm');\n                return false;\n            }\n        }\n    };\n\n    var events = {\n        /**\n         * beforeValidate event is triggered before validating the whole form.\n         * The signature of the event handler should be:\n         *     function (event, messages, deferreds)\n         * where\n         *  - event: an Event object.\n         *  - messages: an associative array with keys being attribute IDs and values being error message arrays\n         *    for the corresponding attributes.\n         *  - deferreds: an array of Deferred objects. You can use deferreds.add(callback) to add a new deferred validation.\n         *\n         * If the handler returns a boolean false, it will stop further form validation after this event. And as\n         * a result, afterValidate event will not be triggered.\n         */\n        beforeValidate: 'beforeValidate',\n        /**\n         * afterValidate event is triggered after validating the whole form.\n         * The signature of the event handler should be:\n         *     function (event, messages, errorAttributes)\n         * where\n         *  - event: an Event object.\n         *  - messages: an associative array with keys being attribute IDs and values being error message arrays\n         *    for the corresponding attributes.\n         *  - errorAttributes: an array of attributes that have validation errors. Please refer to attributeDefaults for the structure of this parameter.\n         */\n        afterValidate: 'afterValidate',\n        /**\n         * beforeValidateAttribute event is triggered before validating an attribute.\n         * The signature of the event handler should be:\n         *     function (event, attribute, messages, deferreds)\n         * where\n         *  - event: an Event object.\n         *  - attribute: the attribute to be validated. Please refer to attributeDefaults for the structure of this parameter.\n         *  - messages: an array to which you can add validation error messages for the specified attribute.\n         *  - deferreds: an array of Deferred objects. You can use deferreds.add(callback) to add a new deferred validation.\n         *\n         * If the handler returns a boolean false, it will stop further validation of the specified attribute.\n         * And as a result, afterValidateAttribute event will not be triggered.\n         */\n        beforeValidateAttribute: 'beforeValidateAttribute',\n        /**\n         * afterValidateAttribute event is triggered after validating the whole form and each attribute.\n         * The signature of the event handler should be:\n         *     function (event, attribute, messages)\n         * where\n         *  - event: an Event object.\n         *  - attribute: the attribute being validated. Please refer to attributeDefaults for the structure of this parameter.\n         *  - messages: an array to which you can add additional validation error messages for the specified attribute.\n         */\n        afterValidateAttribute: 'afterValidateAttribute',\n        /**\n         * beforeSubmit event is triggered before submitting the form after all validations have passed.\n         * The signature of the event handler should be:\n         *     function (event)\n         * where event is an Event object.\n         *\n         * If the handler returns a boolean false, it will stop form submission.\n         */\n        beforeSubmit: 'beforeSubmit',\n        /**\n         * ajaxBeforeSend event is triggered before sending an AJAX request for AJAX-based validation.\n         * The signature of the event handler should be:\n         *     function (event, jqXHR, settings)\n         * where\n         *  - event: an Event object.\n         *  - jqXHR: a jqXHR object\n         *  - settings: the settings for the AJAX request\n         */\n        ajaxBeforeSend: 'ajaxBeforeSend',\n        /**\n         * ajaxComplete event is triggered after completing an AJAX request for AJAX-based validation.\n         * The signature of the event handler should be:\n         *     function (event, jqXHR, textStatus)\n         * where\n         *  - event: an Event object.\n         *  - jqXHR: a jqXHR object\n         *  - textStatus: the status of the request (\"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", or \"parsererror\").\n         */\n        ajaxComplete: 'ajaxComplete',\n        /**\n         * afterInit event is triggered after yii activeForm init.\n         * The signature of the event handler should be:\n         *     function (event)\n         * where\n         *  - event: an Event object.\n         */\n        afterInit: 'afterInit'\n    };\n\n    // NOTE: If you change any of these defaults, make sure you update yii\\widgets\\ActiveForm::getClientOptions() as well\n    var defaults = {\n        // whether to encode the error summary\n        encodeErrorSummary: true,\n        // the jQuery selector for the error summary\n        errorSummary: '.error-summary',\n        // whether to perform validation before submitting the form.\n        validateOnSubmit: true,\n        // the container CSS class representing the corresponding attribute has validation error\n        errorCssClass: 'has-error',\n        // the container CSS class representing the corresponding attribute passes validation\n        successCssClass: 'has-success',\n        // the container CSS class representing the corresponding attribute is being validated\n        validatingCssClass: 'validating',\n        // the GET parameter name indicating an AJAX-based validation\n        ajaxParam: 'ajax',\n        // the type of data that you're expecting back from the server\n        ajaxDataType: 'json',\n        // the URL for performing AJAX-based validation. If not set, it will use the the form's action\n        validationUrl: undefined,\n        // whether to scroll to first visible error after validation.\n        scrollToError: true,\n        // offset in pixels that should be added when scrolling to the first error.\n        scrollToErrorOffset: 0,\n        // where to add validation class: container or input\n        validationStateOn: 'container'\n    };\n\n    // NOTE: If you change any of these defaults, make sure you update yii\\widgets\\ActiveField::getClientOptions() as well\n    var attributeDefaults = {\n        // a unique ID identifying an attribute (e.g. \"loginform-username\") in a form\n        id: undefined,\n        // attribute name or expression (e.g. \"[0]content\" for tabular input)\n        name: undefined,\n        // the jQuery selector of the container of the input field\n        container: undefined,\n        // the jQuery selector of the input field under the context of the form\n        input: undefined,\n        // the jQuery selector of the error tag under the context of the container\n        error: '.help-block',\n        // whether to encode the error\n        encodeError: true,\n        // whether to perform validation when a change is detected on the input\n        validateOnChange: true,\n        // whether to perform validation when the input loses focus\n        validateOnBlur: true,\n        // whether to perform validation when the user is typing.\n        validateOnType: false,\n        // number of milliseconds that the validation should be delayed when a user is typing in the input field.\n        validationDelay: 500,\n        // whether to enable AJAX-based validation.\n        enableAjaxValidation: false,\n        // function (attribute, value, messages, deferred, $form), the client-side validation function.\n        validate: undefined,\n        // status of the input field, 0: empty, not entered before, 1: validated, 2: pending validation, 3: validating\n        status: 0,\n        // whether the validation is cancelled by beforeValidateAttribute event handler\n        cancelled: false,\n        // the value of the input\n        value: undefined,\n        // whether to update aria-invalid attribute after validation\n        updateAriaInvalid: true\n    };\n\n\n    var submitDefer;\n\n    var setSubmitFinalizeDefer = function ($form) {\n        submitDefer = $.Deferred();\n        $form.data('yiiSubmitFinalizePromise', submitDefer.promise());\n    };\n\n    // finalize yii.js $form.submit\n    var submitFinalize = function ($form) {\n        if (submitDefer) {\n            submitDefer.resolve();\n            submitDefer = undefined;\n            $form.removeData('yiiSubmitFinalizePromise');\n        }\n    };\n\n\n    var methods = {\n        init: function (attributes, options) {\n            return this.each(function () {\n                var $form = $(this);\n                if ($form.data('yiiActiveForm')) {\n                    return;\n                }\n\n                var settings = $.extend({}, defaults, options || {});\n                if (settings.validationUrl === undefined) {\n                    settings.validationUrl = $form.attr('action');\n                }\n\n                $.each(attributes, function (i) {\n                    attributes[i] = $.extend({value: getValue($form, this)}, attributeDefaults, this);\n                    watchAttribute($form, attributes[i]);\n                });\n\n                $form.data('yiiActiveForm', {\n                    settings: settings,\n                    attributes: attributes,\n                    submitting: false,\n                    validated: false,\n                    validate_only: false, // validate without auto submitting\n                    options: getFormOptions($form)\n                });\n\n                /**\n                 * Clean up error status when the form is reset.\n                 * Note that $form.on('reset', ...) does work because the \"reset\" event does not bubble on IE.\n                 */\n                $form.on('reset.yiiActiveForm', methods.resetForm);\n\n                if (settings.validateOnSubmit) {\n                    $form.on('mouseup.yiiActiveForm keyup.yiiActiveForm', ':submit', function () {\n                        $form.data('yiiActiveForm').submitObject = $(this);\n                    });\n                    $form.on('submit.yiiActiveForm', methods.submitForm);\n                }\n                var event = $.Event(events.afterInit);\n                $form.trigger(event);\n            });\n        },\n\n        // add a new attribute to the form dynamically.\n        // please refer to attributeDefaults for the structure of attribute\n        add: function (attribute) {\n            var $form = $(this);\n            attribute = $.extend({value: getValue($form, attribute)}, attributeDefaults, attribute);\n            $form.data('yiiActiveForm').attributes.push(attribute);\n            watchAttribute($form, attribute);\n        },\n\n        // remove the attribute with the specified ID from the form\n        remove: function (id) {\n            var $form = $(this),\n                attributes = $form.data('yiiActiveForm').attributes,\n                index = -1,\n                attribute = undefined;\n            $.each(attributes, function (i) {\n                if (attributes[i]['id'] == id) {\n                    index = i;\n                    attribute = attributes[i];\n                    return false;\n                }\n            });\n            if (index >= 0) {\n                attributes.splice(index, 1);\n                unwatchAttribute($form, attribute);\n            }\n\n            return attribute;\n        },\n\n        // manually trigger the validation of the attribute with the specified ID\n        validateAttribute: function (id) {\n            var attribute = methods.find.call(this, id);\n            if (attribute != undefined) {\n                validateAttribute($(this), attribute, true);\n            }\n        },\n\n        // find an attribute config based on the specified attribute ID\n        find: function (id) {\n            var attributes = $(this).data('yiiActiveForm').attributes,\n                result = undefined;\n            $.each(attributes, function (i) {\n                if (attributes[i]['id'] == id) {\n                    result = attributes[i];\n                    return false;\n                }\n            });\n            return result;\n        },\n\n        destroy: function () {\n            return this.each(function () {\n                $(this).off('.yiiActiveForm');\n                $(this).removeData('yiiActiveForm');\n            });\n        },\n\n        data: function () {\n            return this.data('yiiActiveForm');\n        },\n\n        // validate all applicable inputs in the form\n        validate: function (forceValidate) {\n            if (forceValidate) {\n                $(this).data('yiiActiveForm').submitting = true;\n            }\n\n            var $form = $(this),\n                data = $form.data('yiiActiveForm'),\n                needAjaxValidation = false,\n                messages = {},\n                deferreds = deferredArray(),\n                submitting = data.submitting;\n\n            if (submitting) {\n                var event = $.Event(events.beforeValidate);\n                $form.trigger(event, [messages, deferreds]);\n\n                if (event.result === false) {\n                    data.submitting = false;\n                    submitFinalize($form);\n                    return;\n                }\n            }\n\n            // client-side validation\n            $.each(data.attributes, function () {\n                this.$form = $form;\n                var $input = findInput($form, this);\n\n                var disabled = $input.toArray().reduce(function (result, next) {\n                    return result && $(next).is(':disabled');\n                }, true);\n                if (disabled) {\n                    return true;\n                }\n                // validate markup for select input\n                if ($input.length && $input[0].tagName.toLowerCase() === 'select') {\n                    var opts = $input[0].options, isEmpty = !opts || !opts.length, isRequired = $input.attr('required'),\n                        isMultiple = $input.attr('multiple'), size = $input.attr('size') || 1;\n                    // check if valid HTML markup for select input, else return validation as `true`\n                    // https://w3c.github.io/html-reference/select.html\n                    if (isRequired && !isMultiple && parseInt(size, 10) === 1) { // invalid select markup condition\n                        if (isEmpty) { // empty option elements for the select\n                            return true;\n                        }\n                        if (opts[0] && (opts[0].value !== '' && opts[0].text !== '')) { // first option is not empty\n                            return true;\n                        }\n                    }\n                }\n                this.cancelled = false;\n                // perform validation only if the form is being submitted or if an attribute is pending validation\n                if (data.submitting || this.status === 2 || this.status === 3) {\n                    var msg = messages[this.id];\n                    if (msg === undefined) {\n                        msg = [];\n                        messages[this.id] = msg;\n                    }\n\n                    var event = $.Event(events.beforeValidateAttribute);\n                    $form.trigger(event, [this, msg, deferreds]);\n                    if (event.result !== false) {\n                        if (this.validate) {\n                            this.validate(this, getValue($form, this), msg, deferreds, $form);\n                        }\n                        if (this.enableAjaxValidation) {\n                            needAjaxValidation = true;\n                        }\n                    } else {\n                        this.cancelled = true;\n                    }\n                }\n            });\n\n            // ajax validation\n            $.when.apply(this, deferreds).always(function () {\n                // Remove empty message arrays\n                for (var i in messages) {\n                    if (0 === messages[i].length) {\n                        delete messages[i];\n                    }\n                }\n                if (needAjaxValidation && ($.isEmptyObject(messages) || data.submitting)) {\n                    var $button = data.submitObject,\n                        extData = '&' + data.settings.ajaxParam + '=' + $form.attr('id');\n                    if ($button && $button.length && $button.attr('name')) {\n                        extData += '&' + $button.attr('name') + '=' + $button.attr('value');\n                    }\n                    $.ajax({\n                        url: data.settings.validationUrl,\n                        type: $form.attr('method'),\n                        data: $form.serialize() + extData,\n                        dataType: data.settings.ajaxDataType,\n                        complete: function (jqXHR, textStatus) {\n                            currentAjaxRequest = null;\n                            $form.trigger(events.ajaxComplete, [jqXHR, textStatus]);\n                        },\n                        beforeSend: function (jqXHR, settings) {\n                            currentAjaxRequest = jqXHR;\n                            $form.trigger(events.ajaxBeforeSend, [jqXHR, settings]);\n                        },\n                        success: function (msgs) {\n                            if (msgs !== null && typeof msgs === 'object') {\n                                $.each(data.attributes, function () {\n                                    if (!this.enableAjaxValidation || this.cancelled) {\n                                        delete msgs[this.id];\n                                    }\n                                });\n                                updateInputs($form, $.extend(messages, msgs), submitting);\n                            } else {\n                                updateInputs($form, messages, submitting);\n                            }\n                        },\n                        error: function () {\n                            data.submitting = false;\n                            submitFinalize($form);\n                        }\n                    });\n                } else {\n                    if (data.submitting) {\n                        // delay callback so that the form can be submitted without problem\n                        window.setTimeout(function () {\n                            updateInputs($form, messages, submitting);\n                        }, 200);\n                    } else {\n                        updateInputs($form, messages, submitting);\n                    }\n                }\n            });\n        },\n\n        submitForm: function () {\n            var $form = $(this),\n                data = $form.data('yiiActiveForm');\n            if (data.validated) {\n                // Second submit's call (from validate/updateInputs)\n                data.submitting = false;\n                var event = $.Event(events.beforeSubmit);\n                $form.trigger(event);\n                if (event.result === false) {\n                    data.validated = false;\n                    submitFinalize($form);\n                    return false;\n                }\n                updateHiddenButton($form);\n                return true;   // continue submitting the form since validation passes\n            } else {\n                // First submit's call (from yii.js/handleAction) - execute validating\n                setSubmitFinalizeDefer($form);\n\n                if (data.settings.timer !== undefined) {\n                    clearTimeout(data.settings.timer);\n                }\n                data.submitting = true;\n                methods.validate.call($form);\n                return false;\n            }\n        },\n\n        resetForm: function () {\n            var $form = $(this);\n            var data = $form.data('yiiActiveForm');\n            // Because we bind directly to a form reset event instead of a reset button (that may not exist),\n            // when this function is executed form input values have not been reset yet.\n            // Therefore we do the actual reset work through setTimeout.\n            window.setTimeout(function () {\n                $.each(data.attributes, function () {\n                    // Without setTimeout() we would get the input values that are not reset yet.\n                    this.value = getValue($form, this);\n                    this.status = 0;\n                    var $container = $form.find(this.container),\n                        $input = findInput($form, this),\n                        $errorElement = data.settings.validationStateOn === 'input' ? $input : $container;\n\n                    $errorElement.removeClass(\n                        data.settings.validatingCssClass + ' ' +\n                        data.settings.errorCssClass + ' ' +\n                        data.settings.successCssClass\n                    );\n                    $container.find(this.error).html('');\n                });\n                $form.find(data.settings.errorSummary).hide().find('ul').html('');\n            }, 1);\n        },\n\n        /**\n         * Updates error messages, input containers, and optionally summary as well.\n         * If an attribute is missing from messages, it is considered valid.\n         * @param messages array the validation error messages, indexed by attribute IDs\n         * @param summary whether to update summary as well.\n         */\n        updateMessages: function (messages, summary) {\n            var $form = $(this);\n            var data = $form.data('yiiActiveForm');\n            $.each(data.attributes, function () {\n                updateInput($form, this, messages);\n            });\n            if (summary) {\n                updateSummary($form, messages);\n            }\n        },\n\n        /**\n         * Updates error messages and input container of a single attribute.\n         * If messages is empty, the attribute is considered valid.\n         * @param id attribute ID\n         * @param messages array with error messages\n         */\n        updateAttribute: function (id, messages) {\n            var attribute = methods.find.call(this, id);\n            if (attribute != undefined) {\n                var msg = {};\n                msg[id] = messages;\n                updateInput($(this), attribute, msg);\n            }\n        }\n    };\n\n    var watchAttribute = function ($form, attribute) {\n        var $input = findInput($form, attribute);\n        if (attribute.validateOnChange) {\n            $input.on('change.yiiActiveForm', function () {\n                validateAttribute($form, attribute, false);\n            });\n        }\n        if (attribute.validateOnBlur) {\n            $input.on('blur.yiiActiveForm', function () {\n                if (attribute.status == 0 || attribute.status == 1) {\n                    validateAttribute($form, attribute, true);\n                }\n            });\n        }\n        if (attribute.validateOnType) {\n            $input.on('keyup.yiiActiveForm', function (e) {\n                if ($.inArray(e.which, [16, 17, 18, 37, 38, 39, 40]) !== -1) {\n                    return;\n                }\n                if (attribute.value !== getValue($form, attribute)) {\n                    validateAttribute($form, attribute, false, attribute.validationDelay);\n                }\n            });\n        }\n    };\n\n    var unwatchAttribute = function ($form, attribute) {\n        findInput($form, attribute).off('.yiiActiveForm');\n    };\n\n    var validateAttribute = function ($form, attribute, forceValidate, validationDelay) {\n        var data = $form.data('yiiActiveForm');\n\n        if (forceValidate) {\n            attribute.status = 2;\n        }\n        $.each(data.attributes, function () {\n            if (!isEqual(this.value, getValue($form, this))) {\n                this.status = 2;\n                forceValidate = true;\n            }\n        });\n        if (!forceValidate) {\n            return;\n        }\n\n        if (currentAjaxRequest !== null) {\n            currentAjaxRequest.abort();\n        }\n        if (data.settings.timer !== undefined) {\n            clearTimeout(data.settings.timer);\n        }\n        data.settings.timer = window.setTimeout(function () {\n            if (data.submitting || $form.is(':hidden')) {\n                return;\n            }\n            $.each(data.attributes, function () {\n                if (this.status === 2) {\n                    this.status = 3;\n\n                    var $container = $form.find(this.container),\n                        $input = findInput($form, this);\n\n                    var $errorElement = data.settings.validationStateOn === 'input' ? $input : $container;\n\n                    $errorElement.addClass(data.settings.validatingCssClass);\n                }\n            });\n            methods.validate.call($form);\n        }, validationDelay ? validationDelay : 200);\n    };\n\n    /**\n     * Compares two value whatever it objects, arrays or simple types\n     * @param val1\n     * @param val2\n     * @returns boolean\n     */\n    var isEqual = function (val1, val2) {\n        // objects\n        if (val1 instanceof Object) {\n            return isObjectsEqual(val1, val2)\n        }\n\n        // arrays\n        if (Array.isArray(val1)) {\n            return isArraysEqual(val1, val2);\n        }\n\n        // simple types\n        return val1 === val2;\n    };\n\n    /**\n     * Compares two objects\n     * @param obj1\n     * @param obj2\n     * @returns boolean\n     */\n    var isObjectsEqual = function (obj1, obj2) {\n        if (!(obj1 instanceof Object) || !(obj2 instanceof Object)) {\n            return false;\n        }\n\n        var keys1 = Object.keys(obj1);\n        var keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (var i = 0; i < keys1.length; i += 1) {\n            if (!obj2.hasOwnProperty(keys1[i])) {\n                return false;\n            }\n            if (obj1[keys1[i]] !== obj2[keys1[i]]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Compares two arrays\n     * @param arr1\n     * @param arr2\n     * @returns boolean\n     */\n    var isArraysEqual = function (arr1, arr2) {\n        if (!Array.isArray(arr1) || !Array.isArray(arr2)) {\n            return false;\n        }\n\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n        for (var i = 0; i < arr1.length; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Returns an array prototype with a shortcut method for adding a new deferred.\n     * The context of the callback will be the deferred object so it can be resolved like ```this.resolve()```\n     * @returns Array\n     */\n    var deferredArray = function () {\n        var array = [];\n        array.add = function (callback) {\n            this.push(new $.Deferred(callback));\n        };\n        return array;\n    };\n\n    var buttonOptions = ['action', 'target', 'method', 'enctype'];\n\n    /**\n     * Returns current form options\n     * @param $form\n     * @returns object Object with button of form options\n     */\n    var getFormOptions = function ($form) {\n        var attributes = {};\n        for (var i = 0; i < buttonOptions.length; i++) {\n            attributes[buttonOptions[i]] = $form.attr(buttonOptions[i]);\n        }\n\n        return attributes;\n    };\n\n    /**\n     * Applies temporary form options related to submit button\n     * @param $form the form jQuery object\n     * @param $button the button jQuery object\n     */\n    var applyButtonOptions = function ($form, $button) {\n        for (var i = 0; i < buttonOptions.length; i++) {\n            var value = $button.attr('form' + buttonOptions[i]);\n            if (value) {\n                $form.attr(buttonOptions[i], value);\n            }\n        }\n    };\n\n    /**\n     * Restores original form options\n     * @param $form the form jQuery object\n     */\n    var restoreButtonOptions = function ($form) {\n        var data = $form.data('yiiActiveForm');\n\n        for (var i = 0; i < buttonOptions.length; i++) {\n            $form.attr(buttonOptions[i], data.options[buttonOptions[i]] || null);\n        }\n    };\n\n    /**\n     * Updates the error messages and the input containers for all applicable attributes\n     * @param $form the form jQuery object\n     * @param messages array the validation error messages\n     * @param submitting whether this method is called after validation triggered by form submission\n     */\n    var updateInputs = function ($form, messages, submitting) {\n        var data = $form.data('yiiActiveForm');\n\n        if (data === undefined) {\n            return false;\n        }\n\n        var errorAttributes = [], $input;\n        $.each(data.attributes, function () {\n            var hasError = (submitting && updateInput($form, this, messages)) || (!submitting && attrHasError($form, this, messages));\n            $input = findInput($form, this);\n\n            if (!$input.is(':disabled') && !this.cancelled && hasError) {\n                errorAttributes.push(this);\n            }\n        });\n\n        $form.trigger(events.afterValidate, [messages, errorAttributes]);\n\n        if (submitting) {\n            updateSummary($form, messages);\n            if (errorAttributes.length) {\n                if (data.settings.scrollToError) {\n                    var h = $(document).height(), top = $form.find($.map(errorAttributes, function (attribute) {\n                        return attribute.input;\n                    }).join(',')).first().closest(':visible').offset().top - data.settings.scrollToErrorOffset;\n                    top = top < 0 ? 0 : (top > h ? h : top);\n                    var wtop = $(window).scrollTop();\n                    if (top < wtop || top > wtop + $(window).height()) {\n                        $(window).scrollTop(top);\n                    }\n                }\n                data.submitting = false;\n            } else {\n                data.validated = true;\n                if (!data.validate_only) {\n                    if (data.submitObject) {\n                        applyButtonOptions($form, data.submitObject);\n                    }\n                    $form.submit();\n                    if (data.submitObject) {\n                        restoreButtonOptions($form);\n                    }\n                }\n            }\n        } else {\n            $.each(data.attributes, function () {\n                if (!this.cancelled && (this.status === 2 || this.status === 3)) {\n                    updateInput($form, this, messages);\n                }\n            });\n        }\n        submitFinalize($form);\n    };\n\n    /**\n     * Updates hidden field that represents clicked submit button.\n     * @param $form the form jQuery object.\n     */\n    var updateHiddenButton = function ($form) {\n        var data = $form.data('yiiActiveForm');\n        var $button = data.submitObject || $form.find(':submit:first');\n        // TODO: if the submission is caused by \"change\" event, it will not work\n        if ($button.length && $button.attr('type') == 'submit' && $button.attr('name')) {\n            // simulate button input value\n            var $hiddenButton = $('input[type=\"hidden\"][name=\"' + $button.attr('name') + '\"]', $form);\n            if (!$hiddenButton.length) {\n                $('<input>').attr({\n                    type: 'hidden',\n                    name: $button.attr('name'),\n                    value: $button.attr('value')\n                }).appendTo($form);\n            } else {\n                $hiddenButton.attr('value', $button.attr('value'));\n            }\n        }\n    };\n\n    /**\n     * Updates the error message and the input container for a particular attribute.\n     * @param $form the form jQuery object\n     * @param attribute object the configuration for a particular attribute.\n     * @param messages array the validation error messages\n     * @return boolean whether there is a validation error for the specified attribute\n     */\n    var updateInput = function ($form, attribute, messages) {\n        var data = $form.data('yiiActiveForm'),\n            $input = findInput($form, attribute),\n            hasError = attrHasError($form, attribute, messages);\n\n        if (!$.isArray(messages[attribute.id])) {\n            messages[attribute.id] = [];\n        }\n\n        attribute.status = 1;\n        if ($input.length) {\n            var $container = $form.find(attribute.container);\n            var $error = $container.find(attribute.error);\n            updateAriaInvalid($form, attribute, hasError);\n\n            var $errorElement = data.settings.validationStateOn === 'input' ? $input : $container;\n\n            if (hasError) {\n                if (attribute.encodeError) {\n                    $error.text(messages[attribute.id][0]);\n                } else {\n                    $error.html(messages[attribute.id][0]);\n                }\n                $errorElement.removeClass(data.settings.validatingCssClass + ' ' + data.settings.successCssClass)\n                    .addClass(data.settings.errorCssClass);\n            } else {\n                $error.empty();\n                $errorElement.removeClass(data.settings.validatingCssClass + ' ' + data.settings.errorCssClass + ' ')\n                    .addClass(data.settings.successCssClass);\n            }\n            attribute.value = getValue($form, attribute);\n        }\n\n        $form.trigger(events.afterValidateAttribute, [attribute, messages[attribute.id]]);\n\n        return hasError;\n    };\n\n    /**\n     * Checks if a particular attribute has an error\n     * @param $form the form jQuery object\n     * @param attribute object the configuration for a particular attribute.\n     * @param messages array the validation error messages\n     * @return boolean whether there is a validation error for the specified attribute\n     */\n    var attrHasError = function ($form, attribute, messages) {\n        var $input = findInput($form, attribute),\n            hasError = false;\n\n        if (!$.isArray(messages[attribute.id])) {\n            messages[attribute.id] = [];\n        }\n\n        if ($input.length) {\n            hasError = messages[attribute.id].length > 0;\n        }\n\n        return hasError;\n    };\n\n    /**\n     * Updates the error summary.\n     * @param $form the form jQuery object\n     * @param messages array the validation error messages\n     */\n    var updateSummary = function ($form, messages) {\n        var data = $form.data('yiiActiveForm'),\n            $summary = $form.find(data.settings.errorSummary),\n            $ul = $summary.find('ul').empty();\n\n        if ($summary.length && messages) {\n            $.each(data.attributes, function () {\n                if ($.isArray(messages[this.id]) && messages[this.id].length) {\n                    var error = $('<li/>');\n                    if (data.settings.encodeErrorSummary) {\n                        error.text(messages[this.id][0]);\n                    } else {\n                        error.html(messages[this.id][0]);\n                    }\n                    $ul.append(error);\n                }\n            });\n            $summary.toggle($ul.find('li').length > 0);\n        }\n    };\n\n    var getValue = function ($form, attribute) {\n        var $input = findInput($form, attribute);\n        var type = $input.attr('type');\n        if (type === 'checkbox' || type === 'radio') {\n            var $realInput = $input.filter(':checked');\n            if ($realInput.length > 1) {\n                var values = [];\n                $realInput.each(function (index) {\n                    values.push($($realInput.get(index)).val());\n                });\n                return values;\n            }\n\n            if (!$realInput.length) {\n                $realInput = $form.find('input[type=hidden][name=\"' + $input.attr('name') + '\"]');\n            }\n\n            return $realInput.val();\n        } else {\n            return $input.val();\n        }\n    };\n\n    var findInput = function ($form, attribute) {\n        var $input = $form.find(attribute.input);\n        if ($input.length && $input[0].tagName.toLowerCase() === 'div') {\n            // checkbox list or radio list\n            return $input.find('input');\n        } else {\n            return $input;\n        }\n    };\n\n    var updateAriaInvalid = function ($form, attribute, hasError) {\n        if (attribute.updateAriaInvalid) {\n            $form.find(attribute.input).attr('aria-invalid', hasError ? 'true' : 'false');\n        }\n    }\n\n    var currentAjaxRequest = null;\n\n})(window.jQuery);\n"],"names":["$","fn","yiiActiveForm","method","methods","apply","this","Array","prototype","slice","call","arguments","error","init","submitDefer","defaults","encodeErrorSummary","errorSummary","validateOnSubmit","errorCssClass","successCssClass","validatingCssClass","ajaxParam","ajaxDataType","validationUrl","undefined","scrollToError","scrollToErrorOffset","validationStateOn","attributeDefaults","id","name","container","input","encodeError","validateOnChange","validateOnBlur","validateOnType","validationDelay","enableAjaxValidation","validate","status","cancelled","value","updateAriaInvalid","submitFinalize","$form","resolve","removeData","attributes","options","each","data","settings","extend","attr","i","getValue","watchAttribute","submitting","validated","validate_only","getFormOptions","on","resetForm","submitObject","submitForm","event","Event","trigger","add","attribute","push","remove","index","splice","unwatchAttribute","validateAttribute","find","result","destroy","off","forceValidate","needAjaxValidation","messages","deferreds","deferredArray","$input","findInput","toArray","reduce","next","is","length","tagName","toLowerCase","opts","isEmpty","isRequired","isMultiple","size","parseInt","text","msg","when","always","isEmptyObject","$button","extData","ajax","url","type","serialize","dataType","complete","jqXHR","textStatus","currentAjaxRequest","beforeSend","success","msgs","updateInputs","window","setTimeout","updateHiddenButton","Deferred","promise","setSubmitFinalizeDefer","timer","clearTimeout","$container","removeClass","html","hide","updateMessages","summary","updateInput","updateSummary","updateAttribute","e","inArray","which","isEqual","abort","addClass","val1","val2","Object","isObjectsEqual","isArray","isArraysEqual","obj1","obj2","keys1","keys","keys2","hasOwnProperty","arr1","arr2","array","callback","buttonOptions","errorAttributes","hasError","attrHasError","h","document","height","top","map","join","first","closest","offset","wtop","scrollTop","applyButtonOptions","submit","restoreButtonOptions","$hiddenButton","appendTo","$error","$errorElement","empty","$summary","$ul","append","toggle","$realInput","filter","values","get","val","jQuery"],"sourceRoot":""}